<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/${packageName}/adr/rest</filePath>
    <fileName>${ClassName}RestServiceImpl.java</fileName>
    <content><![CDATA[

package ${packageName}.adr.rest;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Lists;
import ${packageName}.adr.dto.${ClassName}Dto;
import ${packageName}.adr.query.${ClassName}Query;
import ${packageName}.adr.service.${ClassName}Service;
import ${packageName}.adr.spi.${ClassName}RestService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import java.util.List;

/**
 * Service(${functionName})
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@Slf4j
public class ${ClassName}RestServiceImpl implements ${ClassName}RestService {

    @Resource
    private ${ClassName}Service ${className}Service;

    /**
     * get${ClassName}List(获取带分页数据)
     *
     * @param ${className}Query
     * @return ${ClassName}Query
     */
    @Override
    public ${ClassName}Query get${ClassName}ListByPage(@RequestBody ${ClassName}Query ${className}Query) {

        try {
            log.info("get${ClassName}ListByPage ${className}Query={}", JSON.toJSONString(${className}Query));
            return ${className}Service.get${ClassName}ListByPage(${className}Query);
        } catch (Exception e) {
            log.error("Fail to get${ClassName}ListByPage, ${className}Query={}", JSON.toJSONString(${className}Query), e);
            return null;
        }
    }

    /**
     * get${ClassName}List(获取不带分页数据)
     *
     * @param ${className}Dto
     * @return List<${ClassName}Dto>
     */
    @Override
    public List<${ClassName}Dto> get${ClassName}List(@RequestBody ${ClassName}Dto ${className}Dto) {
        try {
            log.info("get${ClassName}List ${className}Dto={}", JSON.toJSONString(${className}Dto));
            return ${className}Service.get${ClassName}List(${className}Dto);
        } catch (Exception e) {
            log.error("Fail to get${ClassName}List, ${className}Dto={}", JSON.toJSONString(${className}Dto), e);
            return Lists.newArrayList();
        }
    }


    /**
     * save (保存数据)
     *
     * @param ${className}Dto
     * @return int
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)
    public int save(@RequestBody ${ClassName}Dto ${className}Dto) {
        try {
            log.info("save ${className}Dto={}", JSON.toJSONString(${className}Dto));
            return ${className}Service.save(${className}Dto);
        } catch (Exception e) {
            log.error("Fail to save, ${className}Dto={}", JSON.toJSONString(${className}Dto), e);
            return 0;
        }
    }

    /**
     * get${ClassName}(获取单条数据)
     *
     * @param ${className}Dto
     * @return ${ClassName}Dto
     */
    @Override
    public ${ClassName}Dto get${ClassName}(@RequestBody ${ClassName}Dto ${className}Dto) {
        try {
            log.info("get${ClassName} ${className}Dto={}", JSON.toJSONString(${className}Dto));
            return ${className}Service.get${ClassName}(${className}Dto);
        } catch (Exception e) {
            log.error("Fail to get${ClassName}, ${className}Dto={}", JSON.toJSONString(${className}Dto), e);
            return null;
        }
    }

    /**
     * get${className}ByNo(获取单条数据)
     *
     * @param ${className}Id
     * @return ${ClassName}Dto
     */
    @Override
    public ${ClassName}Dto get${ClassName}ById(String ${className}Id) {
        try {
            log.info("get${ClassName}ById ${className}Id={}", ${className}Id);
            return ${className}Service.get${ClassName}ById(${className}Id);
        } catch (Exception e) {
            log.error("Fail to get${ClassName}ById, ${className}Id={}", ${className}Id, e);
            return null;
        }
    }

    /**
     * delete(逻辑删除数据)
     *
     * @param id
     * @return boolean
     */
    @Override
    public boolean delete(Long id) {
        try {
            log.info("delete id={}", id);
            return ${className}Service.delete(id);
        } catch (Exception e) {
            log.error("Fail to delete, id={}", id, e);
            return false;
        }
    }

}]]>
    </content>
</template>