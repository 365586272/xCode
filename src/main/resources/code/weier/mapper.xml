<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>mapper</name>
    <filePath>src/${packageName}/adr/dao</filePath>
    <fileName>${ClassName}Dao.xml</fileName>
    <content><![CDATA[
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${packageName}.adr.dao.${ClassName}Dao">


    <#-- 输出字段列 -->
	<sql id="${className}Columns">
		<#assign columnField>
			<#list colList as c>
		a.${c.name} AS "${c.javaFieldId}",
			</#list>
			<#list colList as c>
				<#if c.showType?? && c.showType == "userselect">
					<#list c.javaFieldAttrs as a>
		u${c_index + 1}.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				<#elseif c.showType?? && c.showType == "officeselect">
					<#list c.javaFieldAttrs as a>
		o${c_index + 1}.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				<#elseif c.showType?? && c.showType == "areaselect">
					<#list c.javaFieldAttrs as a>
		a${c_index + 1}.${a[1]} AS "${c.simpleJavaField}.${a[0]}",
					</#list>
				</#if>
			</#list>
		</#assign>
${columnField?substring(0, columnField?last_index_of(","))}
	</sql>

	<#-- 输出字段关联表 -->
	<sql id="${className}Joins">
		<#-- 关联父表 -->
		<#-- 关联系统表 -->
		<#list colList as c>
			<#if c.showType?? && c.showType == "userselect">
		LEFT JOIN sys_user u${c_index + 1} ON u${c_index + 1}.id = a.${c.name}
			<#elseif c.showType?? && c.showType == "officeselect">
		LEFT JOIN sys_office o${c_index + 1} ON o${c_index + 1}.id = a.${c.name}
			<#elseif c.showType?? && c.showType == "areaselect">
		LEFT JOIN sys_area a${c_index + 1} ON a${c_index + 1}.id = a.${c.name}
			</#if>
		</#list>
	</sql>
    <#-- where条件 -->
    <sql id="whereSql">
        <where>
            1=1
            <#list colList as c>
				<#if (c.isQuery?? && c.isQuery == "1")>
					<#if c.queryType ?? && c.queryType == 'between'>
			            <if test="begin${c.simpleJavaField?cap_first} != null and end${c.simpleJavaField?cap_first} != null <#if c.simpleJavaField != c.javaFieldId>and begin${c.javaFieldId?cap_first} != null and end${c.javaFieldId?cap_first} != null </#if>and begin${c.javaFieldId?cap_first} != '' and end${c.javaFieldId?cap_first} != ''">
					<#else>
			            <if test="${c.simpleJavaField} != null<#if c.simpleJavaField != c.javaFieldId> and ${c.javaFieldId} != null</#if> and ${c.javaFieldId} != ''">
					</#if>
					<#if c.queryType ?? && c.queryType == 'between'>
				        AND a.${c.name} BETWEEN ${"#"}{begin${c.simpleJavaField?cap_first}} AND ${"#"}{end${c.simpleJavaField?cap_first}}
					<#elseif c.queryType ?? && c.queryType == 'like'>
				        AND a.${c.name} LIKE concat('%',${"#"}{${c.javaFieldId}},'%')
					<#elseif c.queryType ?? && c.queryType == 'left_like'>
				        AND a.${c.name} LIKE concat('%',${"#"}{${c.javaFieldId}})
					<#elseif c.queryType ?? && c.queryType == 'right_like'>
				        AND a.${c.name} LIKE concat(${"#"}{${c.javaFieldId}},'%')
					<#else>
				        AND a.${c.name} ${c.queryType} ${"#"}{${c.javaFieldId}}
					</#if>
			        </if>
				</#if>
			</#list>
            AND status = 0
        </where>
    </sql>

    <sql id="subWhereSql">
        <where>
            1=1
            <#list colList as c>
				<#if (c.isQuery?? && c.isQuery == "1")>
					<#if c.queryType ?? && c.queryType == 'between'>
			            <if test="begin${c.simpleJavaField?cap_first} != null and end${c.simpleJavaField?cap_first} != null <#if c.simpleJavaField != c.javaFieldId>and begin${c.javaFieldId?cap_first} != null and end${c.javaFieldId?cap_first} != null </#if>and begin${c.javaFieldId?cap_first} != '' and end${c.javaFieldId?cap_first} != ''">
					<#else>
			            <if test="${c.simpleJavaField} != null<#if c.simpleJavaField != c.javaFieldId> and ${c.javaFieldId} != null</#if> and ${c.javaFieldId} != ''">
					</#if>
					<#if c.queryType ?? && c.queryType == 'between'>
				        AND t.${c.name} BETWEEN ${"#"}{begin${c.simpleJavaField?cap_first}} AND ${"#"}{end${c.simpleJavaField?cap_first}}
					<#elseif c.queryType ?? && c.queryType == 'like'>
				        AND t.${c.name} LIKE concat('%',${"#"}{${c.javaFieldId}},'%')
					<#elseif c.queryType ?? && c.queryType == 'left_like'>
				        AND t.${c.name} LIKE concat('%',${"#"}{${c.javaFieldId}})
					<#elseif c.queryType ?? && c.queryType == 'right_like'>
				        AND t.${c.name} LIKE concat(${"#"}{${c.javaFieldId}},'%')
					<#else>
				        AND t.${c.name} ${c.queryType} ${"#"}{${c.javaFieldId}}
					</#if>
			        </if>
				</#if>
			</#list>
            AND status = 0
        </where>
    </sql>

	<select id="get${ClassName}ById" resultType="${packageName}.adr.po.${ClassName}">
		SELECT
			<include refid="${className}Columns"/>
		FROM ${table.name} a
		<include refid="whereSql"/>
	</select>

	<select id="getTotalCount" resultType="Long" parameterType="${packageName}.adr.query.${ClassName}Query">
		SELECT
			count(*) as count
		FROM ${table.name} a
		<include refid="whereSql"/>
	</select>

	<select id="get${ClassName}ListByPage" resultType="${packageName}.adr.po.${ClassName}" parameterType="${packageName}.adr.query.${ClassName}Query">
		SELECT
			<include refid="${className}Columns"/>
		FROM
		(SELECT id from  ${table.name} t
		<include refid="subWhereSql"/>
		 limit ${"#"}{startRow},${"#"}{pageSize}) b inner join
		${table.name} a  on b.id=a.id
	 <#list colList as c>
       <#if c.isSort?? && c.isSort=="1">
         ORDER BY ${c.name} desc
	 </#if>
     </#list>
	</select>

    <select id="get${ClassName}List" resultType="${packageName}.adr.po.${ClassName}" parameterType="${packageName}.adr.po.${ClassName}">
		SELECT
			<include refid="${className}Columns"/>
		FROM (SELECT id from  ${table.name} t
		<include refid="subWhereSql"/>
		) b  inner join ${table.name} a  on b.id=a.id
	<#list colList as c>
       <#if c.isSort?? && c.isSort=="1">
         ORDER BY ${c.name} desc
	 </#if>
     </#list>
	</select>

       <select id="getSingle${ClassName}" resultType="${packageName}.adr.po.${ClassName}" parameterType="${packageName}.adr.po.${ClassName}">
		SELECT
			<include refid="${className}Columns"/>
		FROM
		${table.name} a
		<include refid="whereSql"/>
		limit 1
	</select>


<insert id="add" useGeneratedKeys="true" keyProperty="id">
 <selectKey resultType="long" keyProperty="id" order="AFTER">
        SELECT
        LAST_INSERT_ID()
     </selectKey>
		INSERT INTO ${table.name}(
	<#list colList as c>
	  <#if c.isInsert?? && c.isInsert == "1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="0">
		<if test="${c.javaFieldId} != null">
		 ${c.name},
		</if>
		</#if>
	 </#list>
	<#list colList as c>
	  <#if c.isInsert?? && c.isInsert == "1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="1">
		 ${c.name}
	  </#if>
	</#list>
		) VALUES (
		<#list colList as c>
		 <#if c.isInsert?? && c.isInsert == "1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="0">
		 <if test="${c.javaFieldId} != null">
		  ${"#"}{${c.javaFieldId}},
		   </if>
		 </#if>
		</#list>
		<#list colList as c>
		  <#if c.isInsert?? && c.isInsert == "1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="1">
		 ${"#"}{${c.javaFieldId}}
		  </#if>
		</#list>
		)
	</insert>

   <insert id="addRecordBatch" useGeneratedKeys="true" parameterType="java.util.List">
     <selectKey resultType="long" keyProperty="id" order="AFTER">
        SELECT
        LAST_INSERT_ID()
     </selectKey>
		INSERT INTO ${table.name}(
		<#list colList as c>
		   <#if c.isInsert?? && c.isInsert=="1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="0">
		 ${c.name},
		   </#if>
		</#list>
		<#list colList as c>
		   <#if c.isInsert?? && c.isInsert=="1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="1">
		  ${c.name}
		   </#if>
	    </#list>
		 ) VALUES
 ${r'<foreach collection="list" item="item" index="index" separator="," >'}
		(
			<#list colList as c>
	          <#if c.isInsert?? && c.isInsert=="1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="0">
		  ${"#"}{item.${c.javaFieldId}},
		 </#if>
			</#list>
			<#list colList as c>
			   <#if c.isInsert?? && c.isInsert=="1" && c.isInsertRequiredField?? && c.isInsertRequiredField=="1">
		  ${"#"}{item.${c.javaFieldId}}
			  </#if>
			</#list>
		)
${r"</foreach>"}
	</insert>
<update id="updateById">
   UPDATE ${table.name} SET
    <#list colList as c>
        <#if c.isEdit?? && c.isEdit == "1" && c.isUpdateRequiredField?? && c.isUpdateRequiredField=="0">
            <if test="${c.javaFieldId} != null ">
            ${c.name} = ${"#"}{${c.javaFieldId}},
           </if>
        </#if>
    </#list>
    <#list colList as c>
      <#if c.isEdit?? && c.isEdit == "1" && c.isUpdateRequiredField?? && c.isUpdateRequiredField=="1">
         ${c.name} = ${"#"}{${c.javaFieldId}}
     </#if>
    </#list>
	WHERE id = ${"#"}{id}
</update>

	<update id="delete">
	UPDATE ${table.name} SET
	status = 1
		WHERE id = ${"#"}{id}
	</update>
</mapper>]]>
    </content>
</template>