<?xml version="1.0" encoding="utf-8"?>
<template>
	<name>service</name>
	<filePath>src/${packageName}/${subPackageName}/${javaModuleName}/service</filePath>
	<fileName>${ClassName}Service.java</fileName>
	<content><![CDATA[

package ${packageName}.${subPackageName}.${javaModuleName}.service;
import java.util.List;
import java.util.Map;
import ${packageName}.${subPackageName}.config.HttpBasicAuthConfig;
import ${packageName}.base.model.*;
import ${packageName}.model.${javaModuleName}.*;
import ${packageName}.utils.*;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Service(${functionName})
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@SuppressWarnings("all")

@FeignClient(value = "${r'${appService.application}'}", configuration = HttpBasicAuthConfig.class)// 配置远程服务名以及自定义权限验证配置
@RequestMapping("/server/${subModuleName}/")// 配置远程服务路径

public interface ${ClassName}Service  {

    /**
     * list:(查询${functionName} 带分页数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "getList", consumes = MediaType.APPLICATION_JSON_VALUE)
    Partion list(@RequestBody Map map);


    /**
     * get${ClassName}List:(查询${functionName} 不带分页数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "get${className}list", consumes = MediaType.APPLICATION_JSON_VALUE)
    List<${ClassName}> get${ClassName}List(@RequestBody ${ClassName} ${className});


     /**
     * get${ClassName}:(查询${functionName}单个实体数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "get${className}", consumes = MediaType.APPLICATION_JSON_VALUE)
    public ${ClassName} get${ClassName}(@RequestBody ${ClassName} ${className});

    /**
     * save:(保存${functionName}数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "save", consumes = MediaType.APPLICATION_JSON_VALUE)
    DataReturn save(@RequestBody ${ClassName} ${className});


    /**
     * delete:(删除${functionName}数据)
     * @Author ${functionAuthor}
     * @return
     */
    @RequestMapping(value = "delete", consumes = MediaType.APPLICATION_JSON_VALUE)
    boolean delete(@RequestBody long id);
	
}]]>
	</content>
</template>