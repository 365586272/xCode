<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/${packageName}/service/${subPackageName}/service</filePath>
    <fileName>${ClassName}HelperService.java</fileName>
    <content><![CDATA[

package ${packageName}.${subPackageName}.service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import ${packageName}.dao.${javaModuleName}.${ClassName}Dao;
import ${packageName}.entity.${javaModuleName}.${ClassName};
import ${packageName}.utils.*;
import ${packageName}.service.CacheHelperService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service(${functionName})
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
public class ${ClassName}HelperService  {

	@Autowired
	private ${ClassName}Dao ${className}Dao;
	@Autowired
    private CacheHelperService cacheHelperService;
    private static Logger logger = LoggerFactory.getLogger(${ClassName}Service.class);
	  /**
	   * 获取分页总记录数
	   * @param map
	   * @return
	   */
	   public int  getTotalCount(JSONObject map)
	   {
	      int resCount=0;
	      Integer totalCount =${className}Dao.getTotalCount(map);
	      if(totalCount!=null)
	      {
	        resCount=totalCount;
	      }
	      return resCount;
	   }


    /*
     * save(保存${functionName})
     * @param ${className}
     * @author ${functionAuthor}
     * @date 2018/1/30 14:59
     */
    @Transactional(propagation = Propagation.REQUIRED,rollbackFor=Exception.class)
    public ${ClassName} save(${ClassName} ${className}) {
      ${ClassName} ret=null;
        if (${className} == null) {
            return ret;
        }
        if (${className}.getId() != null && ${className}.getId() > 0) {
            updateById(${className});
            ret=${className};
        } else {
            ${className}.setId(null);
            ${className}Dao.add(${className});
            ret=${className};
        }
        return ret;
    }

     /**
	 * 获取单条数据
	 * @param id
	 * @return
	 */
	 public ${ClassName} get${ClassName}ById (long id)
	 {
	      return ${className}Dao.get${ClassName}ById(id);
	 }

    /**
	 * 获取单条数据
	 * @param ${className}
	 * @author ${functionAuthor}
	 * @return
	 */
	 public ${ClassName} getSignle${ClassName}(${ClassName} ${className})
	 {
	      return ${className}Dao.getSignle${ClassName}(${className});
	 }

    /**
	   * get${className}ByNo(获取${functionName}单条数据--带缓存)
	   * @param ${className}No
	   * @param isCache
	   * @author ${functionAuthor}
	   * @return
	*/
	public ${ClassName} get${ClassName}ByNo(String ${className}No, boolean isCache)
	{
	    ${ClassName} ret=null;
	    if (StringUtil.isBlank(${className}No)) {
            return ret;
        }
        String key = CacheConstantUtil.BY_NO_ +"get${ClassName}ByNo"+ ${className}No;
        String redisCache = null;
        if (isCache) {
            redisCache = cacheHelperService.getSsdbCache(${className}No);
        }
        if (StringUtil.isNotBlank(redisCache)) {
            ret = JSONObject.parseObject(redisCache, ${ClassName}.class);
        }
        if (ret != null) {
            return ret;
        }
        ${ClassName} parms=new ${ClassName}();
        parms.set${ClassName}No(${className}No);
        ret=getSignle${ClassName}(parms);
        if (ret != null && isCache) {
            cacheHelperService.saveSsdb(key, JSON.toJSONString(ret), 60 * 5);
        }
        return ret;
	}
	 /**
	 * 修改单条数据
	 * @param ${className}
	 * @return
	 */
	  public void updateById(${ClassName} ${className})
	  {
	     ${className}Dao.updateById(${className});
	  }
	
}]]>
    </content>
</template>