<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>controller</name>
    <filePath>src/${packageName}/manager/${javaModuleName}/web/controller</filePath>
    <fileName>${ClassName}Controller.java</fileName>
    <content><![CDATA[
package ${packageName}.manager.${javaModuleName}.web.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import javax.servlet.http.HttpServletRequest;
import com.alibaba.fastjson.JSONObject;
import ${packageName}.entity.${ClassName};
import ${packageName}.entity.Partion;
import ${packageName}.common.model.Response;
import ${packageName}.common.tools.StringUtil;
/**
 * ${ClassName}Controller(${functionName})
 * Controller 层的异常应该统一捕获进行处理，这样业务代码更加清晰
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@RestController
@RequestMapping("/${subModuleName}")
@SuppressWarnings("all")
public class ${ClassName}Controller {

    private static Logger logger = LoggerFactory.getLogger(${ClassName}Controller.class);

	@Autowired
	private ${ClassName}ServerService ${className}ServerService;

	/**
	 * getList:(获取${functionName}分页查询接口)
	 * @Author ${functionAuthor}
	 * @param request
	 * @param parms
	 * @return
	 */
	@PostMapping("/getList")
	public Response getList(HttpServletRequest request){
		Response response =Response.failure("查询失败");
		String pageNoStr = request.getParameter("pageNo");
        String length = request.getParameter("pageSize");
         <#list colList as c>
           <#if (c.isQuery?? && c.isQuery == "1")>
             String ${c.javaFieldId} = request.getParameter("${c.javaFieldId}");
           </#if>
		 </#list>
            int pageSize = 10;
            int pageNo = 1;
            if (StringUtil.isNotBlank(pageNoStr)) {
                pageNo = StringUtil.stringToInt(pageNoStr);
            }
            if (StringUtil.isNotBlank(length)) {
                pageSize = StringUtil.stringToInt(length);
            }
         JSONObject param = StringUtil.getPageJSONObject(pageNo, pageSize);
         logger.info("getList:(获取${functionName}分页查询接口) 开始  param={}", param);
         <#list colList as c>
          <#if (c.isQuery?? && c.isQuery == "1")>
             param.put("${c.javaFieldId}",${c.javaFieldId});
           </#if>
		 </#list>
        Partion pt = ${className}ServerService.getList(param);
        List<${ClassName}> list = null;
        long totalCount = 0;
        if (pt != null) {
            list = (List<${ClassName}>) pt.getList();
             totalCount = pt.getTotalCount();
        }
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("list", list);
        jsonObject.put("totalCount", totalCount);
        if (list == null||list.size()<=0) {
            response=Response.noData();
            return response;
        }
        response=Response.success(jsonObject)
        logger.info("getList:(获取${functionName}分页查询接口) 结束");
        return response;
	}

     /**
     * get${ClassName}:(查询${functionName}单条数据接口)
     * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
     */
    @PostMapping("/get${ClassName}")
    public Response get${ClassName}(${ClassName}Requst ${className}Requst,HttpServletRequest request) {
        Response response =Response.failure("查询失败");
        logger.info("get${ClassName}:(查询${functionName}单条数据接口) 开始  ${className}Requst={}", ${className}Requst);
        ${ClassName} ret${className}= ${className}ServerService.get${ClassName}(${className}Requst);
        if (ret${className}==null) {
            response=Response.noData();
            return response;
        }
        response=Response.success(ret${className})
        logger.info("get${ClassName}:(查询${functionName}单条数据接口) 结束");
        return response;
    }

   /**
	 * save:(保存${functionName}数据接口-id存在则修改，id不存在则插入)
	 * @Author ${functionAuthor}
     * @param request
     * @param parms
     * @return
	 */
	@PostMapping("/save")
    public Response save(${ClassName} ${className}) {
		Response response =Response.failure("保存失败");
        ${ClassName} ${className}= new ${ClassName}();
	    logger.info("save:(保存${functionName}数据接口) 开始  ${className}={}", ${className});
        ${className}.setCreateTime(new Date());
        ${className}.setUpdateTime(new Date());
        // 保存数据库
        ${ClassName} ret =${className}ServerService.save(${className});
        if(ret!=null)
        {
          response=Response.success(ret)
        }
        logger.info("save:(保存${functionName}数据接口) 结束");
        return response;
	}

}]]>
    </content>
</template>