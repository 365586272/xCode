<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/${packageName}/manager/${javaModuleName}/service</filePath>
    <fileName>${ClassName}ServerService.java</fileName>
    <content><![CDATA[

package ${packageName}.manager.${javaModuleName}.service;


import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import ${packageName}.entity.Partion;
import ${packageName}.common.tools.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.entity.${ClassName};
import ${packageName}.request.${javaModuleName}.${ClassName}Requst;
/**
 * ${ClassName}Service(${functionName})
 * @author ${functionAuthor}
 * service 层的异常应该统一捕获进行处理，这样业务代码更加清晰
 * @version ${functionVersion}
 */
@RestController
@RequestMapping(value = "/server/${subModuleName}/")
@SuppressWarnings("all")
@Slf4j
public class ${ClassName}ServerService  {

	@Autowired
	private ${ClassName}Mapper ${className}mapper;
	@Autowired
	private ${ClassName}HelperService  ${className}HelperService;

      /**
	   * getList(获取${functionName}带分页数据-服务)
       * @author ${functionAuthor}
       * @param json
	   * @return
	   */
	   @RequestMapping("getList")
	   public Partion  getList(@RequestBody JSONObject json)
	   {
          log.info("getList(获取${functionName}带分页数据-服务) 开始 json={}", json);
          if(json==null||json.size()<1)
          {
             return null;
          }
          int totalcount =${className}HelperService.getTotalCount(json);
          List<${ClassName}> list= null;
          if(totalcount>0)
          {
             list= ${className}mapper.getList(json);
          }
          Partion pt = new Partion(json, list, totalcount);
		  log.info("getList(获取${functionName}带分页数据-服务) 结束 ");
		  return pt;
	   }

	   /**
	   * get${ClassName}List(获取${functionName} 不带分页数据-服务)
       * @author ${functionAuthor}
       * @param ${className}
	   * @return
	   */
	   @RequestMapping("get${ClassName}List")
	   public List<${ClassName}>  get${ClassName}List(@RequestBody ${ClassName}Requst ${className}Requst)
	   {
	       List<${ClassName}> list=null;
          log.info("get${ClassName}List(获取${functionName} 不带分页数据-服务) 开始 parms={}", ${className}Requst);
          if(${className}Requst==null)
          {
             return list;
          }
	      list=${className}mapper.get${ClassName}List(${className}Requst);
	      log.info("get${ClassName}List(获取${functionName} 不带分页数据-服务) 结束");
	      return list;
	   }


    /**
	 * save (保存${functionName} 数据-服务)
	 * @param ${className}
     * @author ${functionAuthor}
	 * @return
	 */
    @RequestMapping("save")
	public ${ClassName} save(@RequestBody ${ClassName} ${className}) throws  Exception
	{
        log.info("save (保存${functionName} 数据-服务) 开始 parms={}", ${className});
        ${ClassName}  ret=${className}HelperService.save(${className});
	    log.info("save (保存${functionName} 数据-服务) 结束");
	    return  ret;
	}


	   /**
	   * get${ClassName}(获取${functionName}单条数据-服务)
	   * @author ${functionAuthor}
	   * @param ${className}
	   * @return
	   */
	   @RequestMapping("get${ClassName}")
	   public ${ClassName}  get${ClassName}(@RequestBody ${ClassName}Requst ${className}Requst)
	   {
	       ${ClassName} ret=null;
           log.info("get${ClassName}(获取${functionName}单条数据-服务) 开始 parms={}", ${className}Requst);
           if(${className}Requst==null)
           {
             return ret;
           }
	       ret=${className}HelperService.getSignle${ClassName}(${className}Requst);
	       log.info("get${ClassName}(获取${functionName}单条数据-服务) 结束 ");
	       return ret;
	   }

    /**
	 * delete(逻辑删除${functionName}数据-服务)
	 * @param id
	 * @author ${functionAuthor}
	 * @return
	 */
     @RequestMapping("delete")
	 public boolean delete(String id)
	 {
	    log.info("delete(逻辑删除${functionName}数据-服务) 开始 id={}", id);
        boolean isSuccess = false;
        if (StringUtil.isBlank(id)) {
            return isSuccess;
        }
        ${ClassName} dt = ${className}HelperService.get${ClassName}ById(id);
        if (dt == null) {
            return isSuccess;
        }
	    ${className}mapper.delete(id);
	    isSuccess = true;
        log.info("delete(逻辑删除${functionName}数据-服务)结束 id={},isSuccess={}", id, isSuccess);
        return isSuccess;
	 }
}]]>
    </content>
</template>