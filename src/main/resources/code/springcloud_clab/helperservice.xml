<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/${packageName}/manager/${javaModuleName}/service</filePath>
    <fileName>${ClassName}HelperService.java</fileName>
    <content><![CDATA[

package ${packageName}.${javaModuleName}.service;

import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ${packageName}.entity.${ClassName};
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
/**
 * ${ClassName} Service(${functionName}辅助类)
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@SuppressWarnings("all")
public class ${ClassName}HelperService  {
    private static Logger logger = LoggerFactory.getLogger(${ClassName}HelperService.class);

	@Autowired
	private ${ClassName}Mapper ${className}mapper;

	  /**
	   * 获取分页总记录数-返回int类型
	   * @param map
	   * @return
	   */
	   public int  getTotalCount(JSONObject map)
	   {
	      int resCount=0;
	      Integer totalCount =${className}mapper.getTotalCount(map);
	      if(totalCount!=null)
	      {
	        resCount=totalCount;
	      }
	      return resCount;
	   }

    /*
     * save(保存${functionName})
     * @param ${className}
     * @author ${functionAuthor}
     * @date 2018/1/30 14:59
     */
   @Transactional(propagation = Propagation.REQUIRED,readOnly =false,isolation = Isolation.REPEATABLE_READ,timeout = 30,rollbackFor = Exception.class)
    public ${ClassName} save(${ClassName} ${className}) throws  Exception {
       ${ClassName} ret=null;
        if (${className} == null) {
            return ret;
        }
        if (${className}.getId() != null && ${className}.getId() > 0) {
            updateById(${className});
            ret=${className};
        } else {
            ${className}.setId(null);
            ${className}mapper.add(${className});
            ret=${className};
        }
        return ret;
    }

     /**
	 * 获取单条数据
	 * @param id
	 * @return
	 */
	 public ${ClassName} get${ClassName}ById (long id)
	 {
	      return ${className}mapper.get${ClassName}ById(id);
	 }

    /**
	 * 获取单条数据
	 * @param ${className}
	 * @author ${functionAuthor}
	 * @return
	 */
	 public ${ClassName} getSignle${ClassName}(${ClassName}Requst ${className}Requst)
	 {
	      return ${className}mapper.getSignle${ClassName}(${className}Requst);
	 }
	 /**
	 * 修改单条数据
	 * @param id
	 * @return
	 */
	  private void updateById(${ClassName} ${className})
	  {
	     ${className}mapper.updateById(${className});
	  }
	
}]]>
    </content>
</template>