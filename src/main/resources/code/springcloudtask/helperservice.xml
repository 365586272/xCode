<?xml version="1.0" encoding="utf-8"?>
<template>
    <name>service</name>
    <filePath>src/${packageName}/${subPackageName}/${javaModuleName}/service</filePath>
    <fileName>${ClassName}HelperService.java</fileName>
    <content><![CDATA[

package ${packageName}.base.${javaModuleName}.service;

import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ${packageName}.model.${javaModuleName}.*;
import ${packageName}.utils.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;
import ${packageName}.base.common.CacheHelperService;
import ${packageName}.base.${javaModuleName}.dao.${ClassName}Dao;
/**
 * Service(${functionName})
 * @author ${functionAuthor}
 * @version ${functionVersion}
 */
@Service
@SuppressWarnings("all")
public class ${ClassName}HelperService  {

	@Autowired
	private ${ClassName}Service ${className}Service;
	@Autowired
    private CacheHelperService cacheHelperService;
    private static Logger logger = LoggerFactory.getLogger(${ClassName}Service.class);

    /*
     * save(保存${functionName})
     * @param ${className}
     * @author ${functionAuthor}
     * @date 2018/1/30 14:59
     */
    public ${ClassName} save(${ClassName} ${className}) {
      ${className}= ${className}Service.save(${className});
        return ${className};
    }

     /**
	 * 获取单条数据
	 * @param id
	 * @return
	 */
	 public ${ClassName} get${ClassName}ById (long id)
	 {
	      return  ${className}Service.get${ClassName}ById(id);
	 }

    /**
	 * 获取单条数据
	 * @param ${className}
	 * @author ${functionAuthor}
	 * @return
	 */
	 public ${ClassName} getSignle${ClassName}(${ClassName} ${className})
	 {
	      return  ${className}Service.getSignle${ClassName}(${className});
	 }

    /**
	   * get${className}ByNo(获取${functionName}单条数据--带缓存)
	   * @param isCache
	   * @param ${ClassName}No
	   * @author ${functionAuthor}
	   * @return
	*/
	public ${ClassName} get${ClassName}ByNo(String ${ClassName}No, boolean isCache)
	{
	    ${ClassName} ret=ret= ${className}Service.getSignle${ClassName}(parms);
        return ret;
	}
	
}]]>
    </content>
</template>